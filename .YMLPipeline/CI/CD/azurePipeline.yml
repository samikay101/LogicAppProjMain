trigger:
  branches:
    include:
      - main
      - develop

pool:
  vmImage: 'windows-latest'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET SDK'
  inputs:
    packageType: 'sdk'
    version: '6.x'

- script: dotnet build --configuration Release
  displayName: 'Build Test Solution'
  workingDirectory: ./Tests

# Debug: Print Directory Structure and Verify testSettings.config
- script: |
    echo "======================================="
    echo " Build.SourcesDirectory: $(Build.SourcesDirectory) "
    echo "======================================="
    
    echo " Listing root directory: "
    dir "$(Build.SourcesDirectory)"

    echo " Listing Tests directory: "
    dir "$(Build.SourcesDirectory)/Tests"

    echo " Listing samiApp1 directory: "
    dir "$(Build.SourcesDirectory)/Tests/samiApp1"

    echo " Listing samiWorkflow1 directory: "
    dir "$(Build.SourcesDirectory)/Tests/samiApp1/samiWorkflow1"

    echo "======================================="
    echo " Checking if testSettings.config exists: "
    
    if exist "$(Build.SourcesDirectory)/Tests/samiApp1/samiWorkflow1/testSettings.config" (
      echo "testSettings.config FOUND!"
    ) else (
      echo "ERROR: testSettings.config NOT FOUND!"
      exit 1
    )
  displayName: 'Debug: Verify testSettings.config Path'

# Optional: Print Environment Variables for debugging
- script: |
    echo "===== Environment Variables ====="
    set
  displayName: 'Print Environment Variables'

# Optional: Check for build output (DLL existence)
- script: |
    echo "===== Checking Build Output ====="
    dir "$(Build.SourcesDirectory)/Tests/samiApp1/bin/Release/net6.0/"
  displayName: 'Verify Build Output Directory'

- task: VSTest@3
  displayName: 'Run Unit Tests'
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: '**/bin/Release/net*/samiApp1.dll'
    searchFolder: '$(Build.SourcesDirectory)/Tests'
    testFiltercriteria: 'TestCategory!=Integration'
    codeCoverageEnabled: true
    diagnosticsEnabled: true   # Enable verbose logging for troubleshooting
    platform: '$(BuildPlatform)'
    configuration: 'Release'

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/TestResults/*.trx'
    mergeTestResults: true

- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage Report'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '**/coverage.cobertura.xml'

# Optional: Verify if the code coverage file was generated
- script: |
    echo "===== Checking Code Coverage Report ====="
    dir "$(Build.SourcesDirectory)"
  displayName: 'Verify Code Coverage File'

# Optional: Publish diagnostic logs as build artifacts
- task: PublishBuildArtifacts@1
  displayName: 'Publish Diagnostic Logs'
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/diagnostics'
    ArtifactName: 'diagnostic-logs'
